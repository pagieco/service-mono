openapi: '3.0.0'

info:
  title: service-mono
  version: 1.0.0
  contact:
    name: Pagie
    url: https://pagie.co
    email: hello@pagie.co

servers:
  - url: https://pagie.co/api/mono

tags:
  - name: Auth
  - name: Domains
  - name: Environments
  - name: Teams
  - name: Profile
  - name: Fonts
  - name: User
  - name: Workflows
  - name: Assets
  - name: Forms
  - name: Pages
  - name: Collections
  - name: Symbols

paths:
  /auth/authenticate:
    post:
      description: Authenticate a user
      tags:
        - Auth
      operationId: Authenticate
      responses:
        200:
          $ref: '#/components/responses/authenticate'
        401:
          $ref: '#/components/responses/status-401-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /auth/register:
    post:
      description: Register a new user
      tags:
        - Auth
      operationId: Register
      responses:
        201:
          $ref: '#/components/responses/register'
        422:
          $ref: '#/components/responses/status-422-response'

  /auth/current-user:
    get:
      description: Get the currently logged in user
      tags:
        - Auth
      operationId: CurrentUser
      security:
        - BearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/user'

  /auth/verify-email:
    get:
      description: Veritify the given account
      tags:
        - Auth
      operationId: VerifyAccount
      responses:
        302:
          $ref: '#/components/responses/status-302-response'
        400:
          $ref: '#/components/responses/status-400-response'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'

  /forms/{form}/submit:
    post:
      description: Handle the form post
      tags:
        - Forms
      operationId: SubmitForm
      responses:
        201:
          $ref: '#/components/responses/submit-form'
        400:
          $ref: '#/components/responses/status-400-response'
        404:
          $ref: '#/components/responses/status-404-response'
        406:
          $ref: '#/components/responses/status-406-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /user:
    patch:
      description: Update the user
      tags:
        - User
      operationId: UpdateUser
      security:
        - BearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/update-user'
        422:
          $ref: '#/components/responses/status-422-response'

  /user/upload-picture:
    post:
      description: Upload the user's profile picture
      tags:
        - User
      operationId: UploadUserPicture
      security:
        - BearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/upload-picture'
        403:
          $ref: '#/components/responses/status-403-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /domains:
    get:
      description: Get a list of domains
      tags:
        - Domains
      operationId: GetDomains
      security:
        - BearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/get-domains'
        204:
          description: No domains found
        403:
          $ref: '#/components/responses/status-403-response'

  /domains/{domain}:
    get:
      description: Get a specific domain
      tags:
        - Domains
      operationId: GetDomain
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: The domain ID
      responses:
        200:
          $ref: '#/components/responses/get-domain'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'

  /environments:
    get:
      description: Get a list of environments
      tags:
        - Environments
      operationId: GetEnvironments
      security:
        - BearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/get-environments'
        204:
          description: No environments found
        403:
          $ref: '#/components/responses/status-403-response'
    post:
      description: Create a new environment
      tags:
        - Environments
      operationId: CreateEnvironment
      security:
        - BearerAuth: []
      responses:
        201:
          $ref: '#/components/responses/create-environment'
        403:
          $ref: '#/components/responses/status-403-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /environments/{environment}:
    get:
      description: Get a specific environment
      tags:
        - Environments
      operationId: GetEnvironment
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: environment
          schema:
            type: string
          required: true
          description: The environment ID
      responses:
        200:
          $ref: '#/components/responses/get-environment'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'
    patch:
      description: Update a specific environment
      tags:
        - Environments
      operationId: UpdateEnvironment
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: environment
          schema:
            type: string
          required: true
          description: The environment ID
      responses:
        200:
          $ref: '#/components/responses/get-environment'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'
        422:
          $ref: '#/components/responses/status-422-response'
    delete:
      description: Delete a specific environment
      tags:
        - Environments
      operationId: DeleteEnvironment
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: environment
          schema:
            type: string
          required: true
          description: The environment ID
      responses:
        204:
          description: Environment successfully deleted
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'

  /environments/{environment}/attach-domain:
    put:
      description: Attach a domain to an environment
      tags:
        - Environments
      operationId: AttachDomain
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: environment
          schema:
            type: string
          required: true
          description: The environment ID
      responses:
        201:
          $ref: '#/components/responses/status-201-response'
        400:
          $ref: '#/components/responses/status-400-response'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /environments/{environment}/detach-domain:
    delete:
      description: Detach a domain from an environment
      tags:
        - Environments
      operationId: DetachDomain
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: environment
          schema:
            type: string
          required: true
          description: The environment ID
      responses:
        204:
          description: Domain successfully detached
        400:
          $ref: '#/components/responses/status-400-response'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /teams:
    get:
      description: Get a list of teams the current user belongs to
      tags:
        - Teams
      operationId: GetTeams
      security:
          - BearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/get-teams'
        403:
          $ref: '#/components/responses/status-403-response'

  /teams/{team}:
    get:
      description: Get a specific team
      tags:
        - Teams
      operationId: GetTeam
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: team
          schema:
            type: string
          required: true
          description: The team ID
      responses:
        200:
          $ref: '#/components/responses/get-team'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'

  /identify:
    post:
      description: Identify a profile
      tags:
        - Profile
      operationId: IdentifyProfile
      parameters:
        - in: header
          name: x-domain-token
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/identify-profile'
        400:
          $ref: '#/components/responses/status-400-response'
        404:
          $ref: '#/components/responses/status-404-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /font-list:
    get:
      description: Get the font list
      tags:
        - Fonts
      operationId: GetFontList
      security:
          - BearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/get-font-list'

  /workflows:
    get:
      description: Get a list of workflows from the given domain
      tags:
        - Workflows
      operationId: GetWorkflows
      security:
          - BearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/get-workflows'
    post:
      description: Create a new workflow
      tags:
        - Workflows
      operationId: CreateWorkflow
      security:
          - BearerAuth: []
      responses:
        201:
          $ref: '#/components/responses/create-workflow'
        403:
          $ref: '#/components/responses/status-403-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /workflows/{workflow}:
    get:
      description: Get a specific workfow
      tags:
        - Workflows
      operationId: GetWorkflow
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: workflow
          schema:
            type: string
          required: true
          description: The workflow ID
      responses:
        200:
          $ref: '#/components/responses/get-workflow'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'
    patch:
      description: Update a specific workflow
      tags:
        - Workflows
      operationId: UpdateWorkflow
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: workflow
          schema:
            type: string
          required: true
          description: The workflow ID
      responses:
        200:
          $ref: '#/components/responses/update-workflow'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /domains/{domain}/assets:
    get:
      description: Get a list of assets from the given domain
      tags:
        - Assets
      operationId: GetAssets
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: The domain ID
      responses:
        200:
          $ref: '#/components/responses/get-assets'
        204:
          description: No assets found
        403:
          $ref: '#/components/responses/status-403-response'
    post:
      description: Upload an asset to the given domain
      tags:
        - Assets
      operationId: UploadAsset
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: The domain ID
      requestBody:
        $ref: '#/components/requestBodies/upload-asset-request'
      responses:
        201:
          $ref: '#/components/responses/get-asset'
        403:
          $ref: '#/components/responses/status-403-response'

  /domains/{domain}/assets/{asset}:
    get:
      description: Get a specific asset
      tags:
        - Assets
      operationId: GetAsset
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: asset
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          $ref: '#/components/responses/get-asset'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'
    delete:
      description: Delete a specific asset
      tags:
        - Assets
      operationId: DeleteAsset
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: asset
          schema:
            type: string
            format: uuid
          required: true
      responses:
        204:
          description: Asset successfully deleted
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'

  /domains/{domain}/forms:
    get:
      description: Get a list of forms from the given domain
      tags:
        - Forms
      operationId: GetForms
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: The domain ID
      responses:
        200:
          $ref: '#/components/responses/get-forms'
        204:
          description: No forms found
        403:
          $ref: '#/components/responses/status-403-response'
    post:
      description: Create a new form
      tags:
        - Forms
      operationId: CreateForm
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: The domain ID
      responses:
        201:
          $ref: '#/components/responses/create-form'
        403:
          $ref: '#/components/responses/status-403-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /domains/{domain}/forms/{form}/submissions:
    get:
      description: Get a list of form submissions from the given form
      tags:
        - Forms
      operationId: GetFormSubmissions
      parameters:
        - in: path
          name: domain
          schema:
            type: string
            format: uuid
          required: true
          description: The domain ID
        - in: path
          name: form
          schema:
            type: string
            format: uuid
          required: true
          description: The form ID
      responses:
        200:
          $ref: '#/components/responses/get-form-submissions'
        204:
          description: No form submissions found
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'

  /domains/{domain}/pages:
    get:
      description: Get a list of pages from the given domain
      tags:
        - Pages
      operationId: GetPages
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: The domain ID
      responses:
        200:
          $ref: '#/components/responses/get-pages'
        204:
          description: No pages found
        403:
          $ref: '#/components/responses/status-403-response'

  /domains/{domain}/pages/{page}/publish:
    put:
      description: Publish the given page
      tags:
        - Pages
      operationId: PublishPage
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: The domain ID
        - in: path
          name: page
          schema:
            type: string
            format: uuid
          required: true
          description: the page ID
      responses:
        200:
          $ref: '#/components/responses/page-published'
        422:
          $ref: '#/components/responses/status-422-response'

  /domains/{domain}/collections:
    get:
      description: get a list of collections from the given domain
      tags:
        - Collections
      operationId: GetCollections
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: The domain ID
      responses:
        200:
          $ref: '#/components/responses/get-collections'
        204:
          description: No collections found
        403:
          $ref: '#/components/responses/status-403-response'
    post:
      description: Create a new collection
      tags:
        - Collections
      operationId: CreateCollection
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: The domain ID
      responses:
        201:
          $ref: '#/components/responses/create-collection'
        403:
          $ref: '#/components/responses/status-403-response'
        422:
          $ref: '#/components/responses/status-422-response'

  /domains/{domain}/collections/{collection}:
    get:
      description: Get a specific collection
      tags:
        - Collections
      operationId: GetCollection
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: collection
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          $ref: '#/components/responses/get-collection'
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'
    delete:
      description: Delete a specific collection
      tags:
        - Collections
      operationId: DeleteCollection
      security:
          - BearerAuth: []
      parameters:
        - in: path
          name: domain
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: collection
          schema:
            type: string
            format: uuid
          required: true
      responses:
        204:
          description: Collection successfully deleted
        403:
          $ref: '#/components/responses/status-403-response'
        404:
          $ref: '#/components/responses/status-404-response'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  requestBodies:
    upload-asset-request:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary

  responses:
    authenticate:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/authenticate'

    register:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/register'

    user:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/user'

    update-user:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/user'

    upload-picture:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/user-picture'

    get-domains:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/domain'

    get-domain:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/domain'

    get-environments:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/environment'

    get-environment:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/environment'

    create-environment:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/environment'

    identify-profile:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/profile'

    get-teams:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/team'

    get-team:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/team'

    get-font-list:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/font'

    get-workflows:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/workflow'

    get-workflow:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/workflow'

    create-workflow:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/workflow'

    update-workflow:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/workflow'

    get-assets:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/asset'

    get-asset:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/asset'

    submit-form:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/form-submission'

    get-forms:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/form'

    create-form:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/form'

    get-form-submissions:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/form-submission'

    get-pages:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/page'

    page-published:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/page'

    get-collections:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/collection'

    get-collection:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/collection'

    create-collection:
      description: OK
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/collection'

    status-201-response:
      description: Created
      content:
        application/json:
          schema:
            properties:
              message:
                type: string

    status-302-response:
      description: Found
      content:
        application/json:
          schema:
            properties:
              message:
                type: string

    status-400-response:
      description: Bad Request
      content:
        application/json:
          schema:
            properties:
              message:
                type: string

    status-401-response:
      description: Unauthorized
      content:
        application/json:
          schema:
            properties:
              message:
                type: string

    status-403-response:
      description: Forbidden
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
                example:
                  Forbidden

    status-404-response:
      description: Not Found
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
                example:
                  Not Found

    status-406-response:
      description: Not Acceptable
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
                example:
                  Not Acceptable

    status-422-response:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
              errors:
                type: object

  schemas:
    authenticate:
      properties:
        type:
          type: string

    register:
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        timezone:
          type: string
        last_ip:
          type: string
        last_login_at:
          type: string
          format: 'date-time'
        email_verified_at:
          type: string
          format: 'date-time'
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    user:
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        timezone:
          type: string
        last_ip:
          type: string
        last_login_at:
          type: string
          format: 'date-time'
        email_verified_at:
          type: string
          format: 'date-time'
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    user-picture:
      properties:
        id:
          type: string
          format: uuid
        picture:
          type: string
        updated_at:
          type: string
          format: 'date-time'

    domain:
      properties:
        id:
          type: string
          format: uuid
        domain_name:
          type: string
        environment:
          $ref: '#/components/schemas/domain-environment'
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    environment:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        domains:
          type: array
          items:
            $ref: '#/components/schemas/environment-domain'
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    environment-domain:
      properties:
        id:
          type: string
          format: uuid
        domain_name:
          type: string
          example:
            test-domain.production.pagie.co

    domain-environment:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    profile:
      properties:
        id:
          type: string
          format: uuid
        domain_id:
          type: string
          format: uuid
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        address_1:
          type: string
        address_2:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        country:
          type: string
        phone:
          type: string
        timezone:
          type: string
        tags:
          type: object
        custom_fields:
          type: object
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    team:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    font:
      properties:
        origin:
          type: string
        family:
          type: string
        variants:
          type: object
        subsets:
          type: object

    workflow:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    asset:
      properties:
        id:
          type: string
          format: uuid
        hash:
          type: string
        filename:
          type: string
        original_filename:
          type: string
        description:
          type: string
          nullable: true
        extension:
          type: string
        mimetype:
          type: string
        filesize:
          type: integer
        extra_attributes:
          type: object
          nullable: true
        path:
          type: string
        thumb_path:
          type: string
        hash_path:
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    form:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    form-submission:
      properties:
        id:
          type: string
          format: uuid
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    page:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    collection:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'
